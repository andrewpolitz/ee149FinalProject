esphome:
  name: anothersmartfan
  friendly_name: anotherSmartFan

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "ru4b9ZTHmvUoVdndyIQ+BYzf/onkfuIFQiSUz1rhJh4="

ota:
  - platform: esphome
    password: "61eb9abfd6b686845e933f6cd6641dc6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Anothersmartfan Fallback Hotspot"
    password: "k9Zc0ViuauwA"

captive_portal:

output:
  - platform: gpio ## led gpio output pin
    pin: GPIO13
    id: led_gpio

  - platform: ledc ##fan gpio output pin
    pin: GPIO21
    id: fan_pwm_output
    frequency: 30000Hz

switch:
  - platform: output
    name: "ESP32 LED"
    output: led_gpio
    id: led_switch
    restore_mode: ALWAYS_OFF
    disabled_by_default: True

globals:
  - id: fan_active
    type: bool
    restore_value: no
    initial_value: "false"
  
  - id: manual_override
    type: bool
    restore_value: no
    initial_value: "false"

  - id: last_motion_detected
    type: unsigned long
    initial_value: "0"

interval:
  - interval: 1s
    then:
      - lambda: |-
          // Manual override is active, do not turn off the fan
          if (id(manual_override)) {
            ESP_LOGI("Override", "Manual override active. PIR is ignored.");
            return;
          }

          // PIR sensor motion detection logic
          if (id(pir_sensor).state) {
            ESP_LOGI("Motion", "Motion detected. Keeping the fan on.");
            id(last_motion_detected) = millis();
            if (!id(fan_active)) {
              id(fan_pwm_output).set_level(0.5); // Turn fan to 50% speed
              id(fan_active) = true;
            }
          } else {
            // Check for inactivity timeout (e.g., 10 seconds)
            if (millis() - id(last_motion_detected) > 10000) {
              if (id(fan_active)) {
                ESP_LOGI("Motion", "No motion for 10 seconds. Turning off the fan.");
                id(fan_pwm_output).set_level(0.0); // Turn off the fan
                id(fan_active) = false;
              }
            }
          }

sensor:
  - platform: rotary_encoder
    name: "Fan Encoder"
    id: fan_encoder
    pin_a:
      number: 32
      mode:
        input: true
        pullup: true
    pin_b:
      number: 27
      mode:
        input: true
        pullup: true
    resolution: 2
    min_value: 0
    max_value: 100
    filters:
      - debounce: 50ms
      - throttle: 100ms
    on_value:
      then:
        - lambda: |-
            int level = (int) id(fan_encoder).state;
            if (level < 0) level = 0;
            if (level > 100) level = 100;

            float duty_cycle;

            if (level == 0) { // Fan off
              duty_cycle = 0.0;
              id(fan_active) = false;
            } else if (level <= 10) { // Low speed range with kickstart
              if (!id(fan_active)) {
                // Apply kickstart pulse
                duty_cycle = 0.8; // High PWM signal for kickstart
                ESP_LOGI("main", "Fan kickstarting...");
                id(fan_pwm_output).set_level(duty_cycle);
                delay(500); // Wait for fan to start
                id(fan_active) = true;
              }
              // Scale down to a stable low duty cycle
              duty_cycle = float(level) / 20.0;
            } else {
              // Normal linear scaling
              duty_cycle = float(level) / 100.0;
              id(fan_active) = true;
            }

            id(fan_pwm_output).set_level(duty_cycle);
            ESP_LOGI("main", "Fan speed set to %d%% (PWM duty cycle: %.2f)", level, duty_cycle);



binary_sensor:
  - platform: gpio
    name: "Manual Button"
    pin:
      number: GPIO33
      mode: INPUT_PULLUP
    on_press:
      then:
        - lambda: |-
            if (id(manual_override)) {
              ESP_LOGI("Button", "Disabling manual override. Returning control to PIR.");
              id(manual_override) = false;
              id(fan_pwm_output).set_level(0.0); // Turn off fan
              id(fan_active) = false;
            } else {
              ESP_LOGI("Button", "Manual override activated. Turning on the fan.");
              id(manual_override) = true;
              id(fan_pwm_output).set_level(0.5); // Set fan to 50% speed
              id(fan_active) = true;
            }
        
  - platform: gpio
    name: "PIR Sensor"
    id: pir_sensor
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
    device_class: motion
    on_state:
      then:
        - switch.toggle: led_switch
        - logger.log: "Motion Detected"
    
