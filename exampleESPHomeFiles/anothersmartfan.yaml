esphome:
  name: anothersmartfan
  friendly_name: anotherSmartFan

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "ru4b9ZTHmvUoVdndyIQ+BYzf/onkfuIFQiSUz1rhJh4="

ota:
  - platform: esphome
    password: "61eb9abfd6b686845e933f6cd6641dc6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Anothersmartfan Fallback Hotspot"
    password: "k9Zc0ViuauwA"

captive_portal:

output:
  - platform: gpio ## led gpio output pin
    pin: GPIO13
    id: led_gpio

  - platform: ledc ##fan gpio output pin
    pin: GPIO21
    id: fan_pwm_output
    frequency: 30000Hz

switch:
  - platform: output
    name: "ESP32 LED"
    output: led_gpio
    id: led_switch
    restore_mode: ALWAYS_OFF
    disabled_by_default: True

sensor:
  - platform: rotary_encoder
    name: "Fan Encoder"
    id: fan_encoder
    pin_a: GPIO32
    pin_b: GPIO27
    resolution: 2
    min_value: 0.0
    max_value: 100.0
    filters:
      - debounce: 10ms
    on_value:
      then:
        - lambda: |-
            int level = id(fan_encoder).state;  // Get encoder value
            float duty_cycle = float(level) / 100.0;  // Convert to 0.0 - 1.0 range
            id(fan_pwm_output).set_level(duty_cycle);  // Update PWM duty cycle
            ESP_LOGI("main", "Fan speed set to %d%%", level);
        

binary_sensor:
  - platform: gpio
    name: "Button Press"
    pin:
      number: GPIO33
      mode: 
        input: True
        pullup: True
    on_press:
      then:
        - switch.toggle: led_switch
  - platform: gpio
    name: "PIR Sensor"
    id: pir_sensor
    pin:
      number: GPIO14  # Replace with the GPIO pin connected to the PIR sensor
      mode: INPUT_PULLUP  # Use pull-up if required
    device_class: motion
    on_state:
      then:
        - switch.toggle: led_switch
        - logger.log: "Motion Detected"
    
